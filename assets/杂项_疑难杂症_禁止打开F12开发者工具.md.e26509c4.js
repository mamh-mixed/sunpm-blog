import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.a9d1f0e8.js";const h=JSON.parse('{"title":"vue打包的html怎么样禁止打开F12开发者工具呢？","description":"","frontmatter":{},"headers":[],"relativePath":"杂项/疑难杂症/禁止打开F12开发者工具.md","filePath":"杂项/疑难杂症/禁止打开F12开发者工具.md","lastUpdated":1695268643000}'),p={name:"杂项/疑难杂症/禁止打开F12开发者工具.md"},o=l(`<h1 id="vue打包的html怎么样禁止打开f12开发者工具呢" tabindex="-1">vue打包的html怎么样禁止打开F12开发者工具呢？ <a class="header-anchor" href="#vue打包的html怎么样禁止打开f12开发者工具呢" aria-label="Permalink to &quot;vue打包的html怎么样禁止打开F12开发者工具呢？&quot;">​</a></h1><p>把你想到的启动它的方式都禁止就行了.</p><ul><li>禁止F12</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">window.onkeydown </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window.onkeyup </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window.</span><span style="color:#B392F0;">onkeypress</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 判断是否按下F12，F12键码为123  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (event.keyCode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">123</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    event.</span><span style="color:#B392F0;">preventDefault</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 阻止默认事件行为  </span></span>
<span class="line"><span style="color:#E1E4E8;">    window.event.returnValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">window.onkeydown </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.onkeyup </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.</span><span style="color:#6F42C1;">onkeypress</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 判断是否按下F12，F12键码为123  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (event.keyCode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">123</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    event.</span><span style="color:#6F42C1;">preventDefault</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 阻止默认事件行为  </span></span>
<span class="line"><span style="color:#24292E;">    window.event.returnValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>禁止右键</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 为右键添加自定义事件，可以禁用  </span></span>
<span class="line"><span style="color:#E1E4E8;">window.</span><span style="color:#B392F0;">oncontextmenu</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  event.</span><span style="color:#B392F0;">preventDefault</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 阻止默认事件行为  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 为右键添加自定义事件，可以禁用  </span></span>
<span class="line"><span style="color:#24292E;">window.</span><span style="color:#6F42C1;">oncontextmenu</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  event.</span><span style="color:#6F42C1;">preventDefault</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 阻止默认事件行为  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>禁止预先调试和快捷键组合</li></ul><ol><li>提前打开调试窗口，然后在地址中输入网址，这样就算不用右键和F12也是打开调试窗口的；</li><li>通过浏览器菜单打开开发者工具来开启调试窗口，还有诸如 shift+ctrl+i 的快捷键打开控制台</li></ol><p>对于这种预先打开调试窗口的方法，我们可以通过比较屏幕 window.outerWidth 和页面可见内容区域 window.innerWidth 的差距判断是否打开控制台</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> threshold </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">160</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 打开控制台的宽或高阈值  </span></span>
<span class="line"><span style="color:#6A737D;">// 每秒检查一次</span></span>
<span class="line"><span style="color:#E1E4E8;">window.</span><span style="color:#B392F0;">setInterval</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (window.outerWidth </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> window.innerWidth </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> threshold </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">    window.outerHeight </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> window.innerHeight </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> threshold) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果打开控制台，则刷新页面</span></span>
<span class="line"><span style="color:#E1E4E8;">    window.location.</span><span style="color:#B392F0;">reload</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}, </span><span style="color:#79B8FF;">1e3</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> threshold </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">160</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 打开控制台的宽或高阈值  </span></span>
<span class="line"><span style="color:#6A737D;">// 每秒检查一次</span></span>
<span class="line"><span style="color:#24292E;">window.</span><span style="color:#6F42C1;">setInterval</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (window.outerWidth </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> window.innerWidth </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> threshold </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">    window.outerHeight </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> window.innerHeight </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> threshold) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果打开控制台，则刷新页面</span></span>
<span class="line"><span style="color:#24292E;">    window.location.</span><span style="color:#6F42C1;">reload</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#005CC5;">1e3</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>作者：前端之路漫长不已</p><p>链接：<a href="https://www.zhihu.com/question/340109086/answer/785160782" target="_blank" rel="noreferrer">https://www.zhihu.com/question/340109086/answer/785160782</a></p><p>来源：知乎</p><p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>`,14),e=[o];function t(r,c,i,E,y,d){return n(),a("div",null,e)}const b=s(p,[["render",t]]);export{h as __pageData,b as default};
