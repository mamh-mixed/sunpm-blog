import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.a9d1f0e8.js";const u=JSON.parse('{"title":"JS中判断空对象","description":"","frontmatter":{},"headers":[],"relativePath":"基础知识/JavaScript/判断是否空对象.md","filePath":"基础知识/JavaScript/判断是否空对象.md","lastUpdated":1695268643000}'),l={name:"基础知识/JavaScript/判断是否空对象.md"},o=p(`<h1 id="js中判断空对象" tabindex="-1"><a href="https://www.cnblogs.com/sefaultment/p/9444345.html" target="_blank" rel="noreferrer">JS中判断空对象</a> <a class="header-anchor" href="#js中判断空对象" aria-label="Permalink to &quot;[JS中判断空对象](https://www.cnblogs.com/sefaultment/p/9444345.html)&quot;">​</a></h1><h3 id="js-判断空对象" tabindex="-1">js 判断空对象 <a class="header-anchor" href="#js-判断空对象" aria-label="Permalink to &quot;js 判断空对象&quot;">​</a></h3><p>首先要区分一个概念，<strong>空对象和空引用</strong>：</p><blockquote><p>空对象：｛｝是指不含任何属性的对象，当然对象属性包括字面值和函数。</p><p>空引用：obj=null 是指变量值指向null变量，当然在js默认不赋值的情况下，一个变量为undefined.</p></blockquote><p>空对象的讨论：</p><blockquote><p>原型： 原型上包括了继承属性，有可以枚举的属性和不可以枚举的属性。默认对象都继承了Object。 自身： 自身属性同样包括了可枚举的属性和不可枚举的属性。</p></blockquote><p>限定场景：</p><blockquote><p>后台JSON对象：</p><p>判断后台传来的对象为空对象，此时，该对象一般为JSON对象，此时可以忽略原型上的属性判断，因为JSON对象也是一个普通对象，不过它的结构有时候比较特殊，该对象默认基础Objcet，然而，作为一个从后台传来的对象，后台无法实现原型继承、不可枚举这种特性，这个时候，只需要关注对象自身可枚举属性时是否为空即可。</p></blockquote><p>解决方案：</p><p>方案 1：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(data) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;{}&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#B392F0;">alert</span><span style="color:#E1E4E8;">(b); </span><span style="color:#6A737D;">//true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(data) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;{}&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(b); </span><span style="color:#6A737D;">//true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>方案 2：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">(obj)返回不包括原型上的可枚举属性，即自身的可枚举属性</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">(data).</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(obj)返回不包括原型上的可枚举属性，即自身的可枚举属性</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(data).</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>方案 2 模拟实现：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">for in语法遍历原型及自身上的可枚举属性，需要结合hasOwnProperty去除原型上的可枚举属性</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isEmptyObj</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">obj</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> key </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> obj) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ({}.hasOwnProperty.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(obj, key)) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> b</span><span style="color:#F97583;">=</span><span style="color:#B392F0;">isEmptyObj</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(b);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">for in语法遍历原型及自身上的可枚举属性，需要结合hasOwnProperty去除原型上的可枚举属性</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isEmptyObj</span><span style="color:#24292E;">(</span><span style="color:#E36209;">obj</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> obj) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ({}.hasOwnProperty.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(obj, key)) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b</span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">isEmptyObj</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(b);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>方案 3：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Objcet.</span><span style="color:#B392F0;">getOwnPropertyNames</span><span style="color:#E1E4E8;">(obj)</span><span style="color:#B392F0;">返回不包括原型上的所有自身属性</span><span style="color:#E1E4E8;">(包括不可枚举的属性)</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> b</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">getOwnPropertyNames</span><span style="color:#E1E4E8;">(data)</span><span style="color:#F97583;">===</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(b);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Objcet.</span><span style="color:#6F42C1;">getOwnPropertyNames</span><span style="color:#24292E;">(obj)</span><span style="color:#6F42C1;">返回不包括原型上的所有自身属性</span><span style="color:#24292E;">(包括不可枚举的属性)</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">getOwnPropertyNames</span><span style="color:#24292E;">(data)</span><span style="color:#D73A49;">===</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(b);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,17),e=[o];function r(t,c,y,E,i,b){return a(),n("div",null,e)}const F=s(l,[["render",r]]);export{u as __pageData,F as default};
