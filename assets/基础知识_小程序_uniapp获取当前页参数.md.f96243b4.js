import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.a9d1f0e8.js";const g=JSON.parse('{"title":"uni-app获取当前页参数","description":"","frontmatter":{},"headers":[],"relativePath":"基础知识/小程序/uniapp获取当前页参数.md","filePath":"基础知识/小程序/uniapp获取当前页参数.md","lastUpdated":1695268643000}'),l={name:"基础知识/小程序/uniapp获取当前页参数.md"},e=p(`<h1 id="uni-app获取当前页参数" tabindex="-1">uni-app获取当前页参数 <a class="header-anchor" href="#uni-app获取当前页参数" aria-label="Permalink to &quot;uni-app获取当前页参数&quot;">​</a></h1><p>正常vue页面中，在onLoad()获取，uni-app文档中有，不赘述</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">onLoad</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">option</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">//option为object类型，会序列化上个页面传递的参数</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(option.id); </span><span style="color:#6A737D;">//打印出上个页面传递的参数。</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(option.name); </span><span style="color:#6A737D;">//打印出上个页面传递的参数。</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">onLoad</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">option</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">//option为object类型，会序列化上个页面传递的参数</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(option.id); </span><span style="color:#6A737D;">//打印出上个页面传递的参数。</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(option.name); </span><span style="color:#6A737D;">//打印出上个页面传递的参数。</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="getcurrentpages" tabindex="-1">getCurrentPages <a class="header-anchor" href="#getcurrentpages" aria-label="Permalink to &quot;getCurrentPages&quot;">​</a></h2><p><code>getCurrentPages()</code> 函数用于获取当前页面栈的实例，以数组形式按栈的顺序给出，第一个元素为首页，最后一个元素为当前页面。</p><p><strong>注意：</strong> <code>getCurrentPages()</code>仅用于展示页面栈的情况，请勿修改页面栈，以免造成页面状态错误。</p><p>每个页面实例的方法属性列表：</p><table><thead><tr><th>方法</th><th>描述</th><th>平台说明</th></tr></thead><tbody><tr><td>page.$getAppWebview()</td><td>获取当前页面的webview对象实例</td><td>App</td></tr><tr><td>page.route</td><td>获取当前页面的路由</td><td></td></tr></tbody></table><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/*获取当前路由*/</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> curPage </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getCurPage</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">//在微信小程序或是app中，通过curPage.options；如果是H5，则需要curPage.$route.query（H5中的curPage.options为undefined，所以刚好就不需要条件编译了）</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> curParam </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> curPage.options </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> curPage.$route.query;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getCurPage</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> pages </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getCurrentPages</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> curPage </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pages[pages.</span><span style="color:#79B8FF;">length</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> curPage</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/*获取当前路由*/</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> curPage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getCurPage</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">//在微信小程序或是app中，通过curPage.options；如果是H5，则需要curPage.$route.query（H5中的curPage.options为undefined，所以刚好就不需要条件编译了）</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> curParam </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> curPage.options </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> curPage.$route.query;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getCurPage</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> pages </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getCurrentPages</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> curPage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pages[pages.</span><span style="color:#005CC5;">length</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> curPage</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>`,9),o=[e];function t(r,c,i,y,E,u){return n(),a("div",null,o)}const b=s(l,[["render",t]]);export{g as __pageData,b as default};
