import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.a9d1f0e8.js";const b=JSON.parse('{"title":"模板语法","description":"","frontmatter":{},"headers":[],"relativePath":"基础知识/Vue/模版语法.md","filePath":"基础知识/Vue/模版语法.md","lastUpdated":1695268643000}'),e={name:"基础知识/Vue/模版语法.md"},p=l(`<h1 id="模板语法" tabindex="-1">模板语法 <a class="header-anchor" href="#模板语法" aria-label="Permalink to &quot;模板语法&quot;">​</a></h1><p><a href="https://github.com/sunpm/re-study-vue/blob/main/src/pages/01.essentials/01.template-syntax.vue" target="_blank" rel="noreferrer">点击查看全文的示例代码（包含js逻辑）</a></p><p>Vue 使用一种基于 html 的模板语法，使我们能够声明式地将其组件实例的数据绑定到呈现的 dom 上。所有的 Vue 模版都是语法层面合法的 html，可以被复合规范的浏览器和 html 解析器解析。</p><p>在底层机制中，Vue 会将模板编译成高度优化的 js 代码。Vue 能够智能地推导出需要重新渲染的组件的最少数量。</p><h2 id="文本插值" tabindex="-1">文本插值 <a class="header-anchor" href="#文本插值" aria-label="Permalink to &quot;文本插值&quot;">​</a></h2><p>最基本的数据绑定形式是文本插值，它使用的是“Mustache”语法（即双大括号）：</p><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;Message: {{msg}}&lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt;Message: {{msg}}&lt;/</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>双大括号标签会被替换为相应组件实例中 <code>msg</code> 属性的值。同时每次 <code>msg</code> 属性更改时它也会同步更新，<code>msg</code> 是一个响应式属性。</p><h2 id="原始html" tabindex="-1">原始html <a class="header-anchor" href="#原始html" aria-label="Permalink to &quot;原始html&quot;">​</a></h2><p>双大括号会将数据插值解释为纯文本，而不是 html。若想插入 html，您需要使用 <code>v-html</code> 指令：</p><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;Using text interpolation: {{ rawHtml }}&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;Using v-html directive: &lt;span v-html=&quot;rawHtml&quot;&gt;&lt;/span&gt;&lt;/p&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;Using text interpolation: {{ rawHtml }}&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;Using v-html directive: &lt;span v-html=&quot;rawHtml&quot;&gt;&lt;/span&gt;&lt;/p&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这里我们遇到新到概念。这里看到的 <code>v-html</code> attribute 被称为一个<strong>指令</strong>。指令由 <code>v-</code> 作为前缀，表明它们是一些由 Vue 提供的特殊 attribute，您可能已经猜到了，它们将为渲染的 dom 应用特殊的响应式行为。</p><p><code>span</code> 的内容将会被替换为 <code>rawHtml</code> 属性的值，插值为纯 html --数据绑定将会被忽略。</p><h2 id="attribute-绑定" tabindex="-1">Attribute 绑定 <a class="header-anchor" href="#attribute-绑定" aria-label="Permalink to &quot;Attribute 绑定&quot;">​</a></h2><p>双大括号不能在 html attributes 中使用。想要响应式地绑定 attribute，应该使用 <code>v-bind</code> 指令：</p><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-bind</span><span style="color:#E1E4E8;">:</span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">dynamicId</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-bind</span><span style="color:#24292E;">:</span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">dynamicId</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>v-bind</code> 指令指示 Vue 将元素的 <code>id</code> attribute 与组件的 <code>dynamicId</code> 属性保持一致。如果绑定的值是 <code>null</code> 或者 <code>undefined</code>，那么该 attribute 将会从渲染的元素上移除。</p><h3 id="简写" tabindex="-1">简写 <a class="header-anchor" href="#简写" aria-label="Permalink to &quot;简写&quot;">​</a></h3><p><code>v-bind</code> 非常常用，Vue 提供了特定的简写语法：</p><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">dynamicId</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> :</span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">dynamicId</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>开头为 <code>:</code> 的attribute 可能和一般的 html attribute 看起来不太一样，但它的确是合法的 attribute 名称字符，并且所有支持 Vue 的浏览器都能正常解析它。此外，它们不会出现在最终的渲染的 dom 中。</p><h3 id="布尔型-attribute" tabindex="-1">布尔型 Attribute <a class="header-anchor" href="#布尔型-attribute" aria-label="Permalink to &quot;布尔型 Attribute&quot;">​</a></h3><p>布尔型 attribule 依据 true / false 值来决定 attribute 是否应该存在于该元素上。<code>disabled</code>就是常见的例子之一。</p><p><code>v-bind</code> 在这种场景下的行为略有不同：</p><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">disabled</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">isButtonDisabled</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;Button&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> :</span><span style="color:#6F42C1;">disabled</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">isButtonDisabled</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">&gt;Button&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>当 <code>isButtonDisabled</code> 为真值或一个空字符串（即 <code>&lt;button disabled=&quot;&quot;&gt;</code>）时，元素会包含这个 <code>disabled</code> attribute。而当其为其他假值时 attribute 将会忽略。</p><h3 id="动态绑定多个值" tabindex="-1">动态绑定多个值 <a class="header-anchor" href="#动态绑定多个值" aria-label="Permalink to &quot;动态绑定多个值&quot;">​</a></h3><p>如果您有像这样的一个包含多个 attribute 的 js对象：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">objectOfAttrs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  id: </span><span style="color:#9ECBFF;">&#39;container&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  class: </span><span style="color:#9ECBFF;">&#39;wrapper&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">objectOfAttrs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  id: </span><span style="color:#032F62;">&#39;container&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  class: </span><span style="color:#032F62;">&#39;wrapper&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>通过不带参数的 <code>v-bind</code>，你可以将它们绑定到单个元素上：</p><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-bind</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">objectOfAttrs</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-bind</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">objectOfAttrs</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="使用-js-表达式" tabindex="-1">使用 js 表达式 <a class="header-anchor" href="#使用-js-表达式" aria-label="Permalink to &quot;使用 js 表达式&quot;">​</a></h2><p>至此，我们仅在模版中绑定了一些简单的属性名。但是 Vue 实际上在所有的数据绑定中都支持完整的 js 表达式：</p><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{{ jsNumber + 1 }}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">{{ jsOk ? &#39;YES&#39; : &#39;NO&#39; }}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">{{ message.split(&#39;&#39;).reverse().join(&#39;&#39;) }}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;\`list-\${</span><span style="color:#E1E4E8;">idIndex</span><span style="color:#9ECBFF;">}\`&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{{ jsNumber + 1 }}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">{{ jsOk ? &#39;YES&#39; : &#39;NO&#39; }}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">{{ message.split(&#39;&#39;).reverse().join(&#39;&#39;) }}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> :</span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;\`list-\${</span><span style="color:#24292E;">idIndex</span><span style="color:#032F62;">}\`&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这些表达式都会被称为 js，以组件为作用于解析执行。</p><p>在 Vue 模板内，js 表达式可以被使用在如下场景上：</p><ul><li>在文本插值中（双大括号）</li><li>在任何 Vue 指令</li></ul>`,37),o=[p];function t(c,r,i,d,E,u){return a(),n("div",null,o)}const h=s(e,[["render",t]]);export{b as __pageData,h as default};
